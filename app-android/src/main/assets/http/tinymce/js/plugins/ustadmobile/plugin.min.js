(function() {
    const multipleChoiceIndex = 0;
    const fillTheBlanksIndex = 1;
    const questionTemplatesDir = "templates/";
    let pageBreak = "";
    for(let counter = 0 ; counter < 2;counter++){
        pageBreak = pageBreak + '<p style="page-break-before: always" class="pg-break">';
    }

    tinymce.PluginManager.add( 'ustadmobile', function( editor ){
        editor.on("preInit", function () {
            console.log("on pre init called")
            editor.parser.addAttributeFilter("data-um-widget", function(nodes, name) {
                for(node in nodes) {
                    if(!nodes.hasOwnProperty(node))
                        continue;
                    const content = tinymce.html.Serializer().serialize(nodes[node]);
                    const widget = QuestionWidget.handleQuestionNode(content);
                    let finalWidget = widget.editOn();
                    finalWidget = $("<div></div>").append(finalWidget).append(pageBreak);
                    const tempNode =  tinymce.html.DomParser().parse($(finalWidget).html());
                    nodes[node].replace(tempNode);

                }
            });

        });

        var questionTypeList = ['Multiple Choice','Fill the blanks','Editor Off','Editor On'];
        var questionTemplateList = ['question-multiple-choice.html','question-fill-the-blanks.html']

        var items = [];

        tinymce.each(questionTypeList, function(questionType){
            const itemId = questionType.replace(/\s/g,"-").toLowerCase();
            items.push({
                text: questionType,
                id: itemId,
                onclick: function(){

                    if(questionType === 'Multiple Choice' || questionType === 'Fill the blanks'){
                        const nextQuestionId = QuestionWidget.getNextQuestionId();
                        const templatePage = questionType == questionTypeList[multipleChoiceIndex]
                            ? questionTemplateList[multipleChoiceIndex] : (questionType === questionTypeList[fillTheBlanksIndex]
                                ? questionTemplateList[fillTheBlanksIndex]: "");
                        $.ajax({url: questionTemplatesDir+templatePage, success: function(templateHtmlContent){
                                const templateContentWithId = $(templateHtmlContent).attr("id",nextQuestionId);
                                const questionContent = $(templateContentWithId).prop('outerHTML');
                                tinymce.activeEditor.execCommand('mceInsertContent', false, questionContent,{format: 'raw'});
                                const questionElements = tinymce.activeEditor.dom.select('div.question');
                                const newNode = tinymce.activeEditor.getDoc().createElement ("br");
                                tinymce.activeEditor.dom.insertAfter(newNode,nextQuestionId);
                            }});
                    }else{

                        const choices = tinymce.activeEditor.dom.select('div.question-choice');
                        const questionMultiBody = tinymce.activeEditor.dom.select('div.multi-choice');
                        const retryOption= tinymce.activeEditor.dom.select('div.select-option');
                        const answerHolder = tinymce.activeEditor.dom.select('div.fill-blanks');
                        const choiceFillAnswer = tinymce.activeEditor.dom.select('div.question-choice-answer');
                        const retryButton = tinymce.activeEditor.dom.select('.question-retry-btn');
                        const choiceFeedback = tinymce.activeEditor.dom.select('div.question-choice-feedback');
                        const choiceFeedbackAlert = tinymce.activeEditor.dom.select('div.question-feedback-container');
                        const questionAnswer = tinymce.activeEditor.dom.select('div.question-answer');
                        const deleteQuestion = tinymce.activeEditor.dom.select('button.btn-delete');
                        const pageBreaks = tinymce.activeEditor.dom.select('p.pg-break');
                        const themeSelector = tinymce.activeEditor.dom.select('div.default-theme');

                        tinymce.activeEditor.dom.addClass(choiceFeedbackAlert,'hide-element');
                        tinymce.activeEditor.dom.removeClass(choiceFeedbackAlert,'show-element');

                        if(questionType === 'Editor Off'){
                            QuestionWidget.handleEditOff();
                            tinymce.activeEditor.dom.remove(tinymce.activeEditor.dom.select('br'));
                            tinymce.activeEditor.dom.remove(tinymce.activeEditor.dom.select('label'));
                            tinymce.activeEditor.dom.remove(tinymce.activeEditor.dom.select('button.add-choice'));

                            tinymce.activeEditor.dom.addClass(
                                tinymce.activeEditor.dom.select('div.question'),'card col-sm-12 col-lg-12 default-padding-bottom default-margin-bottom default-padding-top');
                            tinymce.activeEditor.dom.addClass(
                                tinymce.activeEditor.dom.select('div.question-choice'),'alert alert-secondary');
                            tinymce.activeEditor.dom.addClass(
                                tinymce.activeEditor.dom.select('[data-um-preview="main"]'),'preview-main default-margin-top');
                            tinymce.activeEditor.dom.addClass(
                                tinymce.activeEditor.dom.select('[data-um-preview="alert"]'),'preview-alert default-margin-top');
                            tinymce.activeEditor.dom.addClass(
                                tinymce.activeEditor.dom.select('[data-um-preview="support"]'),'preview-support default-margin-top');

                            //Multiple choice choices
                            tinymce.activeEditor.dom.addClass(choices,'question-choice-pointer');
                            tinymce.activeEditor.dom.removeClass(choices,'default-margin-top');

                            tinymce.activeEditor.dom.removeClass(questionMultiBody,'default-margin-top');
                            tinymce.activeEditor.dom.addClass(questionMultiBody,'default-margin-bottom');

                            tinymce.activeEditor.dom.addClass(questionAnswer,'default-margin-bottom');

                            //Hide retry option selection
                            tinymce.activeEditor.dom.removeClass(retryOption,'show-element');
                            tinymce.activeEditor.dom.addClass(retryOption,'hide-element');

                            //Hide fill the blanks answer
                            tinymce.activeEditor.dom.removeClass(answerHolder,'show-element');
                            tinymce.activeEditor.dom.addClass(answerHolder,'hide-element');


                            //Hide choice correct answer
                            tinymce.activeEditor.dom.removeClass(choiceFillAnswer,'show-element');
                            tinymce.activeEditor.dom.addClass(choiceFillAnswer,'hide-element');

                            //Hide retry button
                            tinymce.activeEditor.dom.removeClass(retryButton,'show-element');
                            tinymce.activeEditor.dom.addClass(retryButton,'hide-element');

                            //Hide multiple choice choice feedback
                            tinymce.activeEditor.dom.removeClass(choiceFeedback,'show-element');
                            tinymce.activeEditor.dom.addClass(choiceFeedback,'hide-element');
                        }else{
                            tinymce.activeEditor.dom.removeClass(
                                tinymce.activeEditor.dom.select('div.question'),'card default-padding-bottom default-margin-bottom default-padding-top');
                            tinymce.activeEditor.dom.removeClass(
                                tinymce.activeEditor.dom.select('div.question-choice'),'alert alert-secondary');
                            tinymce.activeEditor.dom.removeClass(
                                tinymce.activeEditor.dom.select('[data-um-preview="main"]'),'preview-main default-margin-top');
                            tinymce.activeEditor.dom.removeClass(
                                tinymce.activeEditor.dom.select('[data-um-preview="alert"]'),'preview-alert default-margin-top');
                            tinymce.activeEditor.dom.removeClass(
                                tinymce.activeEditor.dom.select('[data-um-preview="support"]'),'preview-support default-margin-top');

                            tinymce.activeEditor.dom.removeClass(
                                tinymce.activeEditor.dom.select('div.question-choice'),'selected-choice');
                            //Multiple choice choices
                            tinymce.activeEditor.dom.removeClass(choices,'question-choice-pointer');
                            tinymce.activeEditor.dom.addClass(choices,'default-margin-top');

                            tinymce.activeEditor.dom.removeClass(questionMultiBody,'default-margin-top');
                            tinymce.activeEditor.dom.addClass(questionMultiBody,'default-margin-bottom');
                            tinymce.activeEditor.dom.removeClass(questionAnswer,'default-margin-bottom');

                            //Hide retry option selection
                            tinymce.activeEditor.dom.addClass(retryOption,'show-element');
                            tinymce.activeEditor.dom.removeClass(retryOption,'hide-element');

                            //Hide fill the blanks answer
                            tinymce.activeEditor.dom.addClass(answerHolder,'show-element');
                            tinymce.activeEditor.dom.removeClass(answerHolder,'hide-element');


                            //Hide choice correct answer
                            tinymce.activeEditor.dom.addClass(choiceFillAnswer,'show-element');
                            tinymce.activeEditor.dom.removeClass(choiceFillAnswer,'hide-element');


                            //Hide multiple choice choice feedback
                            tinymce.activeEditor.dom.addClass(choiceFeedback,'show-element');
                            tinymce.activeEditor.dom.removeClass(choiceFeedback,'hide-element');

                            //show delete question
                            tinymce.activeEditor.dom.addClass(deleteQuestion,'show-element');
                            tinymce.activeEditor.dom.removeClass(deleteQuestion,'hide-element');

                            //show page break
                            tinymce.activeEditor.dom.addClass(pageBreaks,'show-element');
                            tinymce.activeEditor.dom.removeClass(pageBreaks,'hide-element');

                            //theme selector
                            tinymce.activeEditor.dom.addClass(themeSelector,'no-padding');
                        }

                    }
                }
            });
        });



        function showDialog() {
            var win, width, height, data;

            var generalFormItems = [
                {
                    name: 'source1',
                    type: 'filepicker',
                    filetype: 'media',
                    size: 40,
                    autofocus: true,
                    label: 'Source',
                    onchange: function(e) {
                        tinymce.each(e.meta, function(value, key) {
                            win.find('#' + key).value(value);
                        });
                    }
                }
            ];

            function recalcSize(e) {
                var widthCtrl, heightCtrl, newWidth, newHeight;

                widthCtrl = win.find('#width')[0];
                heightCtrl = win.find('#height')[0];

                newWidth = widthCtrl.value();
                newHeight = heightCtrl.value();

                if (win.find('#constrain')[0].checked() && width && height && newWidth && newHeight) {
                    if (e.control == widthCtrl) {
                        newHeight = Math.round((newWidth / width) * newHeight);
                        heightCtrl.value(newHeight);
                    } else {
                        newWidth = Math.round((newHeight / height) * newWidth);
                        widthCtrl.value(newWidth);
                    }
                }

                width = newWidth;
                height = newHeight;
            }


            if(editor.settings.media_autoplay !== false) {
                generalFormItems.push({
                    name: "autoplay",
                    type: "checkbox",
                    label: "Play automatically"
                });
            }

            if(editor.settings.media_controls !== false) {
                generalFormItems.push({
                    name: "controls",
                    type: "checkbox",
                    label: "Show controls",
                    checked: true
                });
            }

            if (editor.settings.media_alt_source !== false) {
                generalFormItems.push({name: 'source2', type: 'filepicker', filetype: 'media', size: 40, label: 'Alternative source'});
            }

            if (editor.settings.media_poster !== false) {
                generalFormItems.push({name: 'poster', type: 'filepicker', filetype: 'image', size: 40, label: 'Poster'});
            }

            if (editor.settings.media_dimensions !== false) {
                generalFormItems.push({
                    type: 'container',
                    label: 'Dimensions',
                    layout: 'flex',
                    align: 'center',
                    spacing: 5,
                    items: [
                        {name: 'width', type: 'textbox', maxLength: 3, size: 3, onchange: recalcSize},
                        {type: 'label', text: 'x'},
                        {name: 'height', type: 'textbox', maxLength: 3, size: 3, onchange: recalcSize},
                        {name: 'constrain', type: 'checkbox', checked: true, text: 'Constrain proportions'}
                    ]
                });
            }

            data = getData(editor.selection.getNode());
            width = data.width;
            height = data.height;

            var embedTextBox = {
                id: 'mcemediasource',
                type: 'textbox',
                flex: 1,
                name: 'embed',
                value: getSource(),
                multiline: true,
                label: 'Source'
            };

            function updateValueOnChange() {
                data = htmlToData(this.value());
                this.parent().parent().fromJSON(data);
            }

            embedTextBox[embedChange] = updateValueOnChange;

            win = editor.windowManager.open({
                title: 'Insert/edit video',
                data: data,
                bodyType: 'tabpanel',
                body: [
                    {
                        title: 'General',
                        type: "form",
                        onShowTab: function() {
                            data = htmlToData(this.next().find('#embed').value());
                            this.fromJSON(data);
                        },
                        items: generalFormItems
                    },

                    {
                        title: 'Embed',
                        type: "panel",
                        layout: 'flex',
                        direction: 'column',
                        align: 'stretch',
                        padding: 10,
                        spacing: 10,
                        onShowTab: function() {
                            this.find('#embed').value(dataToHtml(this.parent().toJSON()));
                        },
                        items: [
                            {
                                type: 'label',
                                text: 'Paste your embed code below:',
                                forId: 'mcemediasource'
                            },
                            embedTextBox
                        ]
                    }
                ],
                onSubmit: function() {
                    var beforeObjects, afterObjects, i, y;

                    beforeObjects = editor.dom.select('img[data-mce-object]');
                    editor.insertContent(dataToHtml(this.toJSON()));
                    afterObjects = editor.dom.select('img[data-mce-object]');

                    // Find new image placeholder so we can select it
                    for (i = 0; i < beforeObjects.length; i++) {
                        for (y = afterObjects.length - 1; y >= 0; y--) {
                            if (beforeObjects[i] == afterObjects[y]) {
                                afterObjects.splice(y, 1);
                            }
                        }
                    }

                    editor.selection.select(afterObjects[0]);
                    editor.nodeChanged();
                }
            });
        }



        /**
         * Add button to the toolbar with drop down functionality
         */
        editor.addButton('ustadmobile', {
            type: 'menubutton',
            text: 'Ustadmobile',
            id: "ustadmobile-menu",
            menu: items
        });

        editor.addButton('medias', {
            tooltip: 'Insert/edit video',
            onclick: showDialog,
            stateSelector: ['img[data-mce-object=video]', 'img[data-mce-object=iframe]']
        });

        editor.addMenuItem('medias', {
            icon: 'media',
            text: 'Insert video',
            onclick: showDialog,
            context: 'insert',
            prependToContext: true
        });

    });
})();