//As Per https://developer.android.com/studio/publish/app-signing.html#release-mode
def keyStorePropertiesExists = rootProject.file("keystore.properties").exists()
def keystoreProperties = new Properties()

if (keyStorePropertiesExists) {
    keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "digital.wup:android-maven-publish:$version_android_maven_publish"
    }
}

apply plugin: 'com.android.library'
apply plugin: "jacoco"
apply plugin: 'digital.wup.android-maven-publish'

configurations.all {
    exclude group: "net.sf.kxml", module: "kxml2"
    exclude group: "org.json", module: "json"
}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.default.properties")))
if (project.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.local.properties")))
}

task startTestSlaveServer(type: Exec) {
    def adb = android.getAdbExe().getAbsolutePath()
    doFirst {
        //Install test slave variant app on the device with the test slave serial
        exec {
            commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], 'install', '-r', "$projectDir/build/outputs/apk/app-android-remotetestslave-debug.apk"
        }
        //Copy the epub expected to be presetned on the test slave device for testing with p2p transfers
        exec {
            commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], 'push', "$projectDir/../sharedse-tests/src/main/resources/com/ustadmobile/test/sharedse/thelittlechicks.epub", "/sdcard/ustadMobileContent/"
        }

        //Get the bluetooth address of the remote test slave server
        def btAddrStdOut = new ByteArrayOutputStream()
        exec {
            commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], "shell", "settings", "get", "secure", "bluetooth_address"
            standardOutput = btAddrStdOut
        }

        //Get the ip address of teh remote test slave server
        def ipAddrStdOut = new ByteArrayOutputStream()
        exec {
            commandLine "$adb", "-s", (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], "shell", "ip", "route"
            standardOutput = ipAddrStdOut
        }

        //Get the wifi direct mac address
        def macAddrStdOut = new ByteArrayOutputStream()
        exec {
            commandLine "$adb", "-s", (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], "shell", "ip", "addr", "show"
            standardOutput = macAddrStdOut
        }

        String ipAddr = null
        String[] ipAddrLines = ipAddrStdOut.toString().split("\n")
        for (int i = 0; i < ipAddrLines.length; i++) {
            String[] ipAddrParts = ipAddrLines[i].split()
            if (ipAddrParts.length >= 9) {
                ipAddr = ipAddrParts[8]
            }
        }

        /*
         * Try and get the WiFi mac address - normally there is an interface called p2p0. If this isn't
         * found (as per the Yoga Tablet 2 Pro), fall back to using the main wlan mac address.
         */
        String wlanMacAddr = null
        String p2pMacAddr = null
        String[] macAddrLines = macAddrStdOut.toString().split("\n")
        boolean lastLineWasDummy = false
        boolean lastLineWasP2p = false
        for (int i = 0; i < macAddrLines.length; i++) {
            if (wlanMacAddr == null && macAddrLines[i].contains("link/ether") && !lastLineWasDummy) {
                wlanMacAddr = macAddrLines[i].split()[1].toUpperCase()
            }

            if (macAddrLines[i].contains("link/ether") && lastLineWasP2p) {
                p2pMacAddr = macAddrLines[i].split()[1].toUpperCase()
            }

            lastLineWasP2p = macAddrLines[i].contains("p2p")
            lastLineWasDummy = macAddrLines[i].contains("dummy")
        }
        String macAddr = (p2pMacAddr != null) ? p2pMacAddr : wlanMacAddr

        //Write those values to the buildconfig.local.properties
        File mainLocalPropertiesFile = rootProject.file("buildconfig.local.properties")
        String propertiesStr = mainLocalPropertiesFile.getText("UTF-8")
        propertiesStr = propertiesStr.replaceAll("test.remote_bluetooth_device=([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})", "test.remote_bluetooth_device=" + btAddrStdOut.toString())
        println("Remote test slave bluetooth address: " + btAddrStdOut.toString())
        println("Remote test slave P2P mac address: " + p2pMacAddr)
        println("Remote test slave IP address: " + ipAddr)

        if (ipAddr != null) {
            propertiesStr = propertiesStr.replaceAll("test.remote_slave_server=(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})", "test.remote_slave_server=" + ipAddr)
        }

        if (p2pMacAddr != null) {
            propertiesStr = propertiesStr.replaceAll("test.remote_wlan_mac_addr=([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})", "test.remote_wlan_mac_addr=" + p2pMacAddr)
        }

        FileOutputStream propertiesOut = new FileOutputStream(mainLocalPropertiesFile)
        propertiesOut.write(propertiesStr.getBytes("UTF-8"))
        propertiesOut.flush()
        propertiesOut.close()
    }

    commandLine "$adb", '-s', (String) project.ext.buildConfigProperties['test.remote_slave_server_serial'], 'shell', 'am', 'start', '-n', 'com.ustadmobile.testslave/com.ustadmobile.port.android.view.RemoteTestSlaveServerActivity', '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER'
}

/*
 * Android emulators do not have bluetooth or wifi. Therefor when testing on an emulator we can
 * only run tests that do not depend on the network.
 */
task testEmulatorLocalconfigDebug(type: Exec) {
    def adb = android.getAdbExe().getAbsolutePath()
    commandLine "$adb", "shell", "am", "instrument", "-w", "-e", "class", "com.ustadmobile.test.port.android.CoreTestSuiteRunAndroid,com.ustadmobile.test.port.android.SharedSeTestSuiteRunAndroid", project.ext.buildConfigProperties['android.applicationId'] + ".test" + "/android.support.test.runner.AndroidJUnitRunner"
}

task grantTestPermissionsLocalconfigDebug(type: Exec) {
    def adb = android.getAdbExe().getAbsolutePath()
    doFirst {
        exec {

        }
    }
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        variant.javaCompiler.dependsOn(copyMainXmlLocaleFilesFromCore)
        variant.javaCompiler.dependsOn(copyLocalconfigXmlLocaleFilesFromCore)
        variant.javaCompiler.dependsOn(generateCoreStringToAndroidResMap)
        variant.javaCompiler.dependsOn(checkBuildConfig)
    }
}

/*
 * Anything under the localconfig variant is not stored in Git. The class UmBaseApplication.java
 * exists in each variant, and controls whether the Application class does or does not extend
 * MultidexApplication. When the source is first checked out, to ensure that all variants build
 * successfully, we must copy UmBaseApplication.java into the localconfig source directory.
 */
task copyLocalconfigUmBaseApplication(type: Copy) {
    inputs.file("src/vanilla/java/com/ustadmobile/port/android/UmBaseApplication.java")

    from("src/vanilla/java/com/ustadmobile/port/android/UmBaseApplication.java")
    into("src/localconfig/java/com/ustadmobile/port/android/")
}



tasks.whenTaskAdded { task ->
    if (task.name == "assembleRemotetestslaveDebug") {
        startTestSlaveServer.dependsOn task
    } else if (task.name == "installLocalconfigDebugAndroidTest") {
        testEmulatorLocalconfigDebug.dependsOn task
    } else if (task.name == "installLocalconfigDebug") {
        testEmulatorLocalconfigDebug.dependsOn task
    } else if (task.name == "assembleLocalconfigDebug" || task.name == "assembleLocalconfigRelease") {
        task.dependsOn(copyLocalconfigUmBaseApplication)
    }
}

android {
    sourceSets {
        main.assets.srcDirs += "../core/src/main/assets/"
        localconfig.assets.srcDirs += "../core/src/localconfig/assets/"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    publishNonDefault true

    signingConfigs {
        release {
            keyAlias keyStorePropertiesExists ? keystoreProperties['keyAlias'] : "default"
            keyPassword keyStorePropertiesExists ? keystoreProperties['keyPassword'] : "default"
            storeFile keyStorePropertiesExists ? file(keystoreProperties['storeFile']) : new File("keystore.ks")
            storePassword keyStorePropertiesExists ? keystoreProperties['storePassword'] : "default"
        }
    }

    lintOptions {
        abortOnError false
    }

    compileSdkVersion rootProject.ext.version_android_compile_sdk
    buildToolsVersion rootProject.ext.version_android_buildtools

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        vectorDrawables.useSupportLibrary = true
        versionCode rootProject.ext.ustadVersionCode
        versionName rootProject.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "ACRA_HTTP_URI", "\"" + project.ext.buildConfigProperties["android.acra.httpUri"] + "\""
        buildConfigField "String", "ACRA_BASIC_LOGIN", "\"" + project.ext.buildConfigProperties["android.acra.basicLogin"] + "\""
        buildConfigField "String", "ACRA_BASIC_PASS", "\"" + project.ext.buildConfigProperties["android.acra.basicPass"] + "\""

        manifestPlaceholders = [applicationClass: "android.app.Application"]

        testInstrumentationRunnerArgument "notAnnotation", "com.ustadmobile.test.core.annotation.PeerServerRequiredTest,com.ustadmobile.test.core.annotation.ImplementationRequiredTest"
    }

    flavorDimensions "config"

    productFlavors {
        /*
         * The localconfig flavor is created based on the buildconfig.local.properties settings
         */
        localconfig {
            dimension "config"
            testApplicationId = project.ext.buildConfigProperties['android.applicationId'] + ".test"
            versionCode rootProject.ext.ustadVersionCode + Integer.parseInt(rootProject.ext.buildConfigProperties['localVersionCode'])
            manifestPlaceholders = ["appName": rootProject.ext.buildConfigProperties['appName']]
        }

        /*
         * The vanilla config flavor is here for convenience : it's the same as having no
         * buildconfig.local.properties and relying on what's in buildconfig.default.properties
         *
         * It's just here to make life easier so you can switch flavors in Android studio without
         * having to remove the local config files themselves
         */
        vanilla {
            dimension "config"
            testApplicationId "com.toughra.ustadmobile.test"
            versionCode rootProject.ext.ustadVersionCode
            manifestPlaceholders = ["appName": "Ustad Mobile"]


            manifestPlaceholders = [appName: "Ustad Mobile", applicationClass: "android.support.multidex.MultiDexApplication"]

        }

        devMinApi21 {
            dimension "config"
            minSdkVersion 21
            multiDexEnabled true
            packagingOptions { //Required: otherwise we get complaints on assembling
                merge "META-INF/INDEX.LIST"
            }
        }

        vanillamultidex {
            dimension "config"
            multiDexEnabled true
            packagingOptions { //Required: otherwise we get complaints on assembling
                merge "META-INF/INDEX.LIST"
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            useProguard false
            testCoverageEnabled = true
        }
    }
}



task checkBuildConfig {
    inputs.files("buildconfig.*.properties")
}
assemble.dependsOn(checkBuildConfig)

task copyMainXmlLocaleFilesFromCore(type: Copy) {
    inputs.files(fileTree(dir: rootProject.file("core/locale")).matching { include '**/*.xml' })

    from("../core/locale/main")
    exclude "**/*.properties"
    into "src/main/res"
}
assemble.dependsOn(copyMainXmlLocaleFilesFromCore)

task copyLocalconfigXmlLocaleFilesFromCore(type: Copy) {
    inputs.files(fileTree(dir: rootProject.file("core/locale")).matching { include '**/*.xml' })

    from("../core/locale/localconfig")
    exclude "**/*.properties"
    into "src/localconfig/res"
}
assemble.dependsOn(copyLocalconfigXmlLocaleFilesFromCore)


task generateCoreStringToAndroidResMap {
    inputs.files("core/locale/*/*.xml")
    onlyIf {
        /*
         Only run this task if the input files have been updated since the task was last run.
         upToDateWhen was not having the expected effect.
         */
        long inputLastModified = 0L
        String[] inDirNames = new String[2]
        inDirNames[0] = "main"
        inDirNames[1] = "localconfig"

        for (int i = 0; i < inDirNames.length; i++) {
            rootProject.fileTree(dir: "core/locale/" + inDirNames[i], include: "**/*.xml").each() { File file ->
                if (file.lastModified() > inputLastModified)
                    inputLastModified = file.lastModified()
            }
        }

        File outputFile = project.file("src/vanilla/java/com/ustadmobile/port/android/generated/MessageIDMap.java")
        return outputFile.lastModified() < inputLastModified;
    }

    doLast {
        int MAIN = 0, LOCALCONFIG = 1, VANILLAMULTIDEX = 2, DEVMINAPI21 = 3
        String[] dirNames = new String[2]
        dirNames[MAIN] = "vanilla"
        dirNames[LOCALCONFIG] = "localconfig"

        String[] inDirNames = new String[2]
        inDirNames[MAIN] = "main"
        inDirNames[LOCALCONFIG] = "localconfig"

        Map<String, String>[] messageIds = new Map[2]
        messageIds[MAIN] = new HashMap<>()
        messageIds[LOCALCONFIG] = new HashMap<>()

        String genSrcHeader, genSrcFooter
        String[] genSrcBody = new String[2]

        genSrcHeader = "package com.ustadmobile.port.android.generated;\n"
        genSrcHeader += "import com.ustadmobile.core.generated.locale.MessageID;\n"
        genSrcHeader += "import com.toughra.ustadmobile.R;\n"
        genSrcHeader += "import java.util.HashMap;\n"
        genSrcHeader += "public class MessageIDMap {\n"
        genSrcHeader += "\tpublic static final HashMap<Integer, Integer> ID_MAP = new HashMap<>();\n"
        genSrcHeader += "\tstatic{\n"

        for (int i = 0; i < dirNames.length; i++) {
            System.out.println("Looking in: core/locale/" + inDirNames[i])
            rootProject.fileTree(dir: "core/locale/" + inDirNames[i], include: "**/*.xml").each() { File file ->
                System.out.println("Found: " + file.getAbsolutePath())
                def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
                xmlDoc.string.each() { str ->
                    String msgName = str.@name
                    if (!messageIds[i].containsKey(msgName)) {
                        messageIds[i].put(msgName, msgName)
                    }
                }
            }
        }

        //Localconfig version will have both core and localconfig items
        messageIds[LOCALCONFIG].putAll(messageIds[MAIN])

        for (int i = 0; i < dirNames.length; i++) {
            genSrcBody[i] = ""
            Iterator<String> nameIterator = messageIds[i].keySet().iterator();
            while (nameIterator.hasNext()) {
                String strName = nameIterator.next()
                genSrcBody[i] += "\t\tID_MAP.put(MessageID." + strName + ", R.string." + strName + ");\n"
            }
        }

        genSrcFooter = "\t}\n"
        genSrcFooter += "}\n"

        File oldMessageIdFile = project.file("src/main/java/com/ustadmobile/port/android/generated/MessageIDMap.java")
        if (oldMessageIdFile.exists()) {
            oldMessageIdFile.delete()
        }

        String[] outDirNames = new String[4]
        outDirNames[MAIN] = "vanilla"
        outDirNames[LOCALCONFIG] = "localconfig"
        outDirNames[VANILLAMULTIDEX] = "vanillamultidex"
        outDirNames[DEVMINAPI21] = "devMinApi21"



        for (int i = 0; i < outDirNames.length; i++) {
            File outDir = project.file("src/" + outDirNames[i] + "/java/com/ustadmobile/port/android/generated")
            if (!outDir.isDirectory()) {
                outDir.mkdirs()
            }

            File outFile = new File(outDir, "MessageIDMap.java")
            int idMapIndex = i < LOCALCONFIG ? i : MAIN;
            outFile.setText(genSrcHeader + genSrcBody[idMapIndex] + genSrcFooter, "UTF-8")
        }


    }
}
assemble.dependsOn(generateCoreStringToAndroidResMap)

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'android.arch.lifecycle'
                || details.requested.group == 'android.arch.core'  ) {
            details.useVersion "$version_android_lifecycle"
        }

        if (details.requested.group == 'com.android.support'
                && !details.requested.name.contains('multidex') ) {
            details.useVersion "$version_android_support_lib"
        }
    }
}



dependencies {
    api project(':core')
    api project(':sharedse')
    api project(":lib-core-fs")
    implementation project(":lib-database-annotation")
    implementation project(":lib-database")
    implementation project(':lib-database-android')
    implementation project(":lib-util")

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    vanillamultidexApi "com.android.support:multidex:$version_android_multidex"

    androidTestImplementation project(":core-tests")

    //ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$version_android_lifecycle"
    annotationProcessor "android.arch.lifecycle:common-java8:$version_android_lifecycle"

    // Room (annotation processing takes place only on lib-database-android to improve build times)
    implementation "android.arch.persistence.room:runtime:$version_android_room"

    // Paging
    implementation "android.arch.paging:runtime:$version_android_paging"


    androidTestImplementation project(":core-tests")
    androidTestImplementation project(":sharedse-tests")
    androidTestImplementation project(":lib-core-fs-tests")

    api 'com.ustadmobile.qrcodelibomrfork:qrcode-core:1.0.3'

    /*
     * If this needs to be made compatible as a library for something using older appcompat libs -
     * use this format:
     *  implementation group: 'com.android.support', name: "appcompat-v7", version: "[26+, 27+]"
     */
    implementation "com.android.support:support-core-utils:$version_android_support_lib"
    implementation "com.android.support:appcompat-v7:$version_android_support_lib"
    implementation "com.android.support:cardview-v7:$version_android_support_lib"
    implementation "com.android.support:design:$version_android_support_lib"
    implementation "com.android.support:support-v4:$version_android_support_lib"
    implementation "com.android.support:recyclerview-v7:$version_android_support_lib"

    //Image loading library
    implementation 'com.squareup.picasso:picasso:2.5.2'

    //Floating action button with support for popup choices
    implementation 'com.github.clans:fab:1.6.4'

    implementation "com.android.support.constraint:constraint-layout:$version_android_constraint_layout"

    //Wifi direct library
    implementation 'com.ustadmobile.wifibuddy:wifibuddy:1.1.45-SNAPSHOT'


    implementation 'de.hdodenhof:circleimageview:2.1.0'

    //used for learner progress view
    implementation 'com.txusballesteros:FitChart:1.0'

    implementation "com.google.android:flexbox:$version_android_flexbox"

    //Used for dns local network discovery on Android versions lower than 5.0
    implementation 'org.jmdns:jmdns:3.5.2'

    //ASCII 85 used to encode
    implementation "com.github.fzakaria:ascii85:$version_ascii85"
    implementation 'com.pixplicity.sharp:library:1.1.0'

    //Support for encrypted zips
    implementation "net.lingala.zip4j:zip4j:$version_zip4j"

    //Crash reporting
    implementation "ch.acra:acra-http:$version_android_acra"
    implementation "ch.acra:acra-dialog:$version_android_acra"

    //Gson for JSON serializing and deserializing
    implementation "com.google.code.gson:gson:$version_gson"

    androidTestImplementation "junit:junit:$version_junit"
    androidTestImplementation group: "com.android.support", name: "support-annotations", version: "$version_android_support_lib"

    //As per: https://developer.android.com/topic/libraries/testing-support-library/packages.html#gradle-dependencies
    androidTestImplementation "com.android.support.test:runner:$version_android_junit_runner"
    androidTestImplementation "com.android.support.test:rules:$version_android_junit_runner"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$version_android_espresso"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$version_android_espresso"

    androidTestImplementation "com.android.support.test.uiautomator:uiautomator-v18:$version_android_uiautomator"

    androidTestImplementation "org.mockito:mockito-android:$version_android_mockito"

    //http server
    implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
    implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"

    testImplementation "junit:junit:$version_junit"

    implementation 'com.github.clans:fab:1.6.4'

}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

publishing {
    publications {
        //For the moment - publish only localconfig debug variant. Can publish others as per:
        // https://github.com/wupdigital/android-maven-publish
        mavenLocalconfigAar(MavenPublication) {
            from components.findByName("androidLocalconfigDebug")
            groupId rootProject.group
            artifactId project.name
            version rootProject.version
        }

    }

    repositories {
        //Set this in projectdir/extrasettings.gradle
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}
