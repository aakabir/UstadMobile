//As Per https://developer.android.com/studio/publish/app-signing.html#release-mode
def keyStorePropertiesExists = rootProject.file("keystore.properties").exists()
def keystoreProperties = new Properties()

if (keyStorePropertiesExists) {
    keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
}

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "digital.wup:android-maven-publish:$version_android_maven_publish"
    }
}

apply plugin: 'com.android.library'
apply plugin: "jacoco"
apply plugin: 'digital.wup.android-maven-publish'

configurations.all {
    exclude group: "net.sf.kxml", module: "kxml2"
    exclude group: "org.json", module: "json"
}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.default.properties")))
if (project.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.local.properties")))
}

/*
  TODO: Refactor to use another task to trigger these tasks

  WARNING: API 'variant.getJavaCompiler()' is obsolete and has been replaced with 'variant.getJavaCompileProvider()'.
  It will be removed at the end of 2019.
  For more information, see https://d.android.com/r/tools/task-configuration-avoidance.
  REASON: Called from: /home/mike/src/UstadMobile/app-android/build.gradle:37
 */
afterEvaluate {
    android.libraryVariants.all { variant ->
        variant.javaCompiler.dependsOn(copyMainXmlLocaleFilesFromCore)
        variant.javaCompiler.dependsOn(generateCoreStringToAndroidResMap)
        variant.javaCompiler.dependsOn(checkBuildConfig)
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.toLowerCase().endsWith("androidtest")) {
        task.dependsOn(":lib-http-testserver:startDaemon")
    }
}

android {
    sourceSets {
        main.assets.srcDirs += "../core/src/main/assets/"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    signingConfigs {
        release {
            keyAlias keyStorePropertiesExists ? keystoreProperties['keyAlias'] : "default"
            keyPassword keyStorePropertiesExists ? keystoreProperties['keyPassword'] : "default"
            storeFile keyStorePropertiesExists ? file(keystoreProperties['storeFile']) : new File("keystore.ks")
            storePassword keyStorePropertiesExists ? keystoreProperties['storePassword'] : "default"
        }
    }

    lintOptions {
        abortOnError false
    }

    compileSdkVersion rootProject.ext.version_android_compile_sdk
    buildToolsVersion rootProject.ext.version_android_buildtools

    defaultConfig {
        minSdkVersion rootProject.ext.version_android_min_sdk
        targetSdkVersion rootProject.ext.version_android_target_sdk
        vectorDrawables.useSupportLibrary = true
        versionCode rootProject.ext.ustadVersionCode
        versionName rootProject.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "ACRA_HTTP_URI", "\"" + project.ext.buildConfigProperties["android.acra.httpUri"] + "\""
        buildConfigField "String", "ACRA_BASIC_LOGIN", "\"" + project.ext.buildConfigProperties["android.acra.basicLogin"] + "\""
        buildConfigField "String", "ACRA_BASIC_PASS", "\"" + project.ext.buildConfigProperties["android.acra.basicPass"] + "\""
        buildConfigField "String", "TEST_HOST", "\"" + rootProject.ext.buildConfigProperties["test.um_http_testserver"] + "\""
        buildConfigField "String", "TEST_PORT", "\"" + rootProject.ext.buildConfigProperties["test.um_http_testserver_controlport"] + "\""


        testInstrumentationRunnerArgument "notAnnotation", "com.ustadmobile.test.core.annotation.PeerServerRequiredTest,com.ustadmobile.test.core.annotation.ImplementationRequiredTest"
    }

    flavorDimensions "config"

    productFlavors {
        /*
         * The main flavor
         */
        vanilla {
            dimension "config"
            testApplicationId "com.toughra.ustadmobile.test"
            versionCode rootProject.ext.ustadVersionCode
        }

        /*
         * Our main application does not exceed 64K methods, but it does exceed this limit with
         * test libraries. Therefor testing on < Android 4.4 requires multidex to be enabled.
         *
         * Min SDK version = 18 as this is required by ui-automator
         */
        vanillamultidex {
            dimension "config"
            minSdkVersion 18
            multiDexEnabled true
            packagingOptions { //Required: otherwise we get complaints on assembling
                merge "META-INF/INDEX.LIST"
            }
        }

        /**
         * Used for day to day work in Android studio to avoid the need to use multidex when running tests
         */
        devMinApi21 {
            dimension "config"
            minSdkVersion 23
            multiDexEnabled true
            packagingOptions { //Required: otherwise we get complaints on assembling
                merge "META-INF/INDEX.LIST"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            useProguard false
            testCoverageEnabled = true
        }
    }
}

/*
 * Disable running tests of the vanilla build (this requires multidex, so we use vanillamultidex instead)
 */
gradle.taskGraph.useFilter { task ->
    if (task.name.equals("connectedVanillaDebugAndroidTest")
            || task.name.equals("createVanillaDebugCoverageReport")
            || task.name.equals("testVanillaDebugUnitTest")
            || task.name.equals("testVanillaReleaseUnitTest")
            || task.name.equals("processVanillaDebugAndroidTestManifest")
            || task.name.equals("transformDexArchiveWithExternalLibsDexMergerForVanillaDebugAndroidTest")) {
        return false;
    }

    return true;
}

task checkBuildConfig {
    inputs.files("buildconfig.*.properties")
}
assemble.dependsOn(checkBuildConfig)

task copyMainXmlLocaleFilesFromCore(type: Copy) {
    inputs.files(fileTree(dir: rootProject.file("core/locale")).matching { include '**/*.xml' })
    from("../core/locale/main")
    exclude "**/*.properties"
    into "src/main/res"
}
assemble.dependsOn(copyMainXmlLocaleFilesFromCore)

task generateCoreStringToAndroidResMap {
    inputs.files("core/locale/main/*.xml")
    onlyIf {
        /*
         Only run this task if the input files have been updated since the task was last run.
         upToDateWhen was not having the expected effect.
         */
        long inputLastModified = 0L

        rootProject.fileTree(dir: "core/locale/main", include: "**/*.xml").each() { File file ->
            if (file.lastModified() > inputLastModified)
                inputLastModified = file.lastModified()
        }

        File outputFile = project.file("src/main/java/com/ustadmobile/port/android/generated/MessageIDMap.java")
        return outputFile.lastModified() < inputLastModified;
    }

    doLast {
        Map<String, String> messageIds = new HashMap<>()

        String genSrcHeader, genSrcFooter
        String genSrcBody = ""

        genSrcHeader = "package com.ustadmobile.port.android.generated;\n"
        genSrcHeader += "import com.ustadmobile.core.generated.locale.MessageID;\n"
        genSrcHeader += "import com.toughra.ustadmobile.R;\n"
        genSrcHeader += "import java.util.HashMap;\n"
        genSrcHeader += "public class MessageIDMap {\n"
        genSrcHeader += "\tpublic static final HashMap<Integer, Integer> ID_MAP = new HashMap<>();\n"
        genSrcHeader += "\tstatic{\n"

        System.out.println("Looking in: core/locale/main")
        rootProject.fileTree(dir: "core/locale/main", include: "**/*.xml").each() { File file ->
            System.out.println("Found: " + file.getAbsolutePath())
            def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
            xmlDoc.string.each() { str ->
                String msgName = str.@name
                if (!messageIds.containsKey(msgName)) {
                    messageIds.put(msgName, msgName)
                }
            }
        }

        Iterator<String> nameIterator = messageIds.keySet().iterator();
        while (nameIterator.hasNext()) {
            String strName = nameIterator.next()
            genSrcBody += "\t\tID_MAP.put(MessageID." + strName + ", R.string." + strName + ");\n"
        }

        genSrcFooter = "\t}\n"
        genSrcFooter += "}\n"

        File oldMessageIdFile = project.file("src/main/java/com/ustadmobile/port/android/generated/MessageIDMap.java")
        if (oldMessageIdFile.exists()) {
            oldMessageIdFile.delete()
        }

        File outDir = project.file("src/main/java/com/ustadmobile/port/android/generated")
        if (!outDir.isDirectory()) {
            outDir.mkdirs()
        }

        File outFile = new File(outDir, "MessageIDMap.java")
        outFile.setText(genSrcHeader + genSrcBody + genSrcFooter, "UTF-8")
    }
}
assemble.dependsOn(generateCoreStringToAndroidResMap)

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'android.arch.lifecycle'
                || details.requested.group == 'android.arch.core') {
            details.useVersion "$version_android_lifecycle"
        }

        if (details.requested.group == 'com.android.support'
                && !details.requested.name.contains('multidex')) {
            details.useVersion "$version_android_support_lib"
        }
    }
}



dependencies {
    api project(':core')
    api project(':sharedse')
    api project(":lib-core-fs")
    implementation project(':lib-database-runtime')
    implementation project(':lib-database')
    implementation project(':lib-database-android')
    implementation project(':lib-database-entities')
    implementation project(":lib-util")

    implementation 'com.android.support:support-v4:27.1.1'
    vanillamultidexApi "com.android.support:multidex:$version_android_multidex"

    androidTestImplementation project(":core-tests")

    //ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$version_android_lifecycle"
    annotationProcessor "android.arch.lifecycle:common-java8:$version_android_lifecycle"

    // Room (annotation processing takes place only on lib-database-android to improve build times)
    implementation "android.arch.persistence.room:runtime:$version_android_room"

    // Paging
    implementation "android.arch.paging:runtime:$version_android_paging"

    //Work manager
    implementation "android.arch.work:work-runtime:$version_android_workmanager"


    androidTestImplementation project(":core-tests")

    /*
     * If this needs to be made compatible as a library for something using older appcompat libs -
     * use this format:
     *  implementation group: 'com.android.support', name: "appcompat-v7", version: "[26+, 27+]"
     */
    implementation "com.android.support:support-core-utils:$version_android_support_lib"
    implementation "com.android.support:appcompat-v7:$version_android_support_lib"
    implementation "com.android.support:cardview-v7:$version_android_support_lib"
    implementation "com.android.support:design:$version_android_support_lib"
    implementation "com.android.support:support-v4:$version_android_support_lib"
    implementation "com.android.support:recyclerview-v7:$version_android_support_lib"
    implementation "com.android.support:design:$version_android_support_lib"
    implementation "com.android.support.constraint:constraint-layout:$version_android_constraint_layout"

    //Image loading library
    implementation 'com.squareup.picasso:picasso:2.5.2'

    //Floating action button with support for popup choices
    implementation 'com.github.clans:fab:1.6.4'

    //Page indicator
    implementation 'com.romandanylyk:pageindicatorview:1.0.0@aar'

    implementation 'de.hdodenhof:circleimageview:3.0.0'

    implementation "com.google.android.exoplayer:exoplayer:$version_exo_player"

    //used for learner progress view
    implementation 'com.txusballesteros:FitChart:1.0'

    implementation "com.google.android:flexbox:$version_android_flexbox"

    //SVG support for Android
    implementation 'com.pixplicity.sharp:library:1.1.0'

    //Support for encrypted zips
    implementation "net.lingala.zip4j:zip4j:$version_zip4j"

    //Crash reporting
    implementation "ch.acra:acra-http:$version_android_acra"
    implementation "ch.acra:acra-dialog:$version_android_acra"

    //extended fab
    implementation "com.github.dimorinny:floating-text-button:$version_android_fab_extended"

    //Gson for JSON serializing and deserializing
    implementation "com.google.code.gson:gson:$version_gson"

    //Codec2 (low bitrate voice) Android library
    implementation "com.ustadmobile.codec2:libcodec2-android:0.8"

    androidTestImplementation "junit:junit:$version_junit"
    androidTestImplementation group: "com.android.support", name: "support-annotations", version: "$version_android_support_lib"

    //As per: https://developer.android.com/topic/libraries/testing-support-library/packages.html#gradle-dependencies
    androidTestImplementation "com.android.support.test:runner:$version_android_junit_runner"
    androidTestImplementation "com.android.support.test:rules:$version_android_junit_runner"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$version_android_espresso"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$version_android_espresso"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$version_android_espresso"
    androidTestImplementation "com.android.support.test.espresso:espresso-web:$version_android_espresso"

    androidTestImplementation "com.android.support.test.uiautomator:uiautomator-v18:$version_android_uiautomator"

    androidTestImplementation "org.mockito:mockito-android:$version_android_mockito"

    testImplementation "org.mockito:mockito-core:$version_android_mockito"

    testImplementation "org.robolectric:robolectric:$version_android_roboelectric"

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$version_mockwebserver"

    androidTestImplementation "commons-io:commons-io:$version_commons_io"

    //http server
    implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
    implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"

    testImplementation "junit:junit:$version_junit"

    //FAB Menu
    implementation 'com.github.clans:fab:1.6.4'

    implementation "id.zelory:compressor:${version_compressor}"

    //jsuop
    implementation "org.jsoup:jsoup:$version_jsoup"

    testImplementation "com.squareup.okhttp3:okhttp:$version_okhttp"
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

publishing {
    publications {
        //For the moment - publish only vanilla debug variant. Can publish others as per:
        // https://github.com/wupdigital/android-maven-publish
        mavenLocalconfigAar(MavenPublication) {
            from components.findByName("androidVanillaDebug")
            groupId rootProject.group
            artifactId project.name
            version rootProject.version
        }

    }

    repositories {
        //Set this in projectdir/extrasettings.gradle
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}
