import java.nio.file.Files
import java.nio.file.Path
import java.util.concurrent.atomic.AtomicInteger

/**
 * Core module build script : see buildconfig.core.default.gradle for configuration
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.7'
    }
}

apply plugin: "java-library"
apply plugin: "jacoco"
apply plugin: "maven-publish"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

jar {
    //Exclude factory classes that are intended to be replaced by platform specific implementations
    exclude("com/ustadmobile/core/impl/*Factory.class")
    exclude("com/ustadmobile/core/db/impl/*Factory.class")
    exclude("com/ustadmobile/core/db/entities/*.class")
    exclude("com/ustadmobile/core/db/*_Factory.class")
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava

}

repositories {
    mavenCentral()
    maven {
        url "http://devserver2.ustadmobile.com/repo-mvn"
    }
}

dependencies {
    implementation "org.json:json:$version_json"
    implementation "net.sf.kxml:kxml2:$version_kxml"
    implementation "com.ustadmobile.qrcodelibomrfork:qrcode-core:$version_qrcodelibfork"
    implementation project(':lib-database')
    compileOnly project(':lib-database-entities')
    implementation project(':lib-database-runtime')
    implementation project(":lib-util")



    testImplementation project(":core-tests")
    testImplementation project(":sharedse")
    testImplementation project(":app-javase")
    testImplementation project(":lib-core-fs-tests")
    testImplementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
    testImplementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"
    testImplementation project(":sharedse-tests")
    testImplementation "junit:junit:$version_junit"
}


test {
    testLogging {
        exceptionFormat = 'full'
    }
}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.default.properties")))
if(rootProject.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.local.properties")))
}



/**
 * Note: This is compiled into the main source directory (then gitignore'd) because Android studio
 * will otherwise mark it as an unresolved reference if we use the default generated sources directory.
 */
task generateCoreBuildConfig (type: de.fuerstenau.gradle.buildconfig.GenerateBuildConfigTask) {
    inputs.files(fileTree(dir: rootProject.file(".")).matching { include 'buildconfig.*.properties' })
    outputDir = new File ("${projectDir}/src/main/java")
    packageName = "com.ustadmobile.core.buildconfig"
    appName = project.ext.buildConfigProperties['appName']
    clsName = "CoreBuildConfig"
    version = rootProject.version

    String[] supportedLocales = project.ext.buildConfigProperties.getProperty("appSupportedLocales").split(",")
    String supportedLocalesValue = "new String[]{"
    for(int k = 0; k < supportedLocales.length; k++) {
        supportedLocalesValue += "\"" + supportedLocales[k] + "\""
        if(k != supportedLocales.length-1)
            supportedLocalesValue += ","
    }
    supportedLocalesValue += "}"

    buildConfigField "String[]", "SUPPORTED_LOCALES", supportedLocalesValue

    buildConfigField "String", "BASE_NAME", project.ext.buildConfigProperties["baseName"]
    buildConfigField "String", "DEFAULT_PREFERRED_ACQUISITION_FORMATS", project.ext.buildConfigProperties["appPreferredAcquisitionFormats"]
    buildConfigField "String", "NETWORK_SERVICE_TYPE", project.ext.buildConfigProperties["appNetworkServiceType"]
    buildConfigField "String", "WIFI_P2P_INSTANCE_NAME", project.ext.buildConfigProperties["appP2pServiceInstanceName"]
    buildConfigField "String", "DEFAULT_XAPI_SERVER", project.ext.buildConfigProperties["appDefaultXapiServer"]
    buildConfigField "String", "DEFAULT_XAPI_SERVER_NOSSL", project.ext.buildConfigProperties["appDefaultXapiServerNoSsl"]
    buildConfigField "boolean", "WELCOME_DIALOG_ENABLED", project.ext.buildConfigProperties["appWelcomeDialgEnabled"]
    buildConfigField "boolean", "EPUB_TOC_ENABLED", project.ext.buildConfigProperties["appEpubTocEnabled"]

}
compileJava.dependsOn(generateCoreBuildConfig)

task prepareLocale (type: de.fuerstenau.gradle.buildconfig.GenerateBuildConfigTask) {
    inputs.files(fileTree(dir: rootProject.file("locale")).matching { include '*.xml' })
    outputDir = new File("${projectDir}/src/main/java")
    packageName = "com.ustadmobile.core.generated.locale"

    appName = project.ext.buildConfigProperties['appName']
    clsName = "MessageID"

    Map<String, Integer> messageIds = new HashMap<>();
    AtomicInteger messageIdGenerator = new AtomicInteger(2000)

    rootProject.fileTree(dir : "core/locale/main/values", include: "*.xml").each() { File file ->
        def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
        xmlDoc.string.each() { str ->
            String msgName = str.@name

            if(!messageIds.containsKey(msgName)) {
                Integer value;
                if(str.attributes().get("value") != null) {
                    value = new Integer(str.attributes().get("value"))
                }else {
                    value = new Integer(messageIdGenerator.getAndIncrement())
                }

                messageIds.put(msgName, value)
            }
        }
    }

    Iterator<String> nameIterator = messageIds.keySet().iterator();
    while(nameIterator.hasNext()) {
        String strName = nameIterator.next()
        Integer value =messageIds.get(strName)

        buildConfigField "int", strName, String.valueOf(value)
    }
}
compileJava.dependsOn(prepareLocale)

/*
 * Generate .properties version of the core locale files, a class that extends GWT Messages, and
 * a helper with a switch statement that will retrieve a String value given the numerical message id.
 */
task generateLocaleAsPropertiesFiles {
    inputs.files("core/locale/*/*.xml")
    doLast {
        //map in the form of filename-localename
        HashMap<String, Properties> mainPropsMap = new HashMap()
        File outDir = new File("${projectDir}/build/generated/locale-properties")

        if(!outDir.exists()) {
            outDir.mkdirs()
        }

        File mainOutDir = new File(outDir, "main")
        if(!mainOutDir.exists()) {
            mainOutDir.mkdir()
        }

        File mainPropsOutDir = new File(mainOutDir, "props")
        if(!mainPropsOutDir.exists()) {
            mainPropsOutDir.mkdir()
        }

        rootProject.fileTree(dir : "core/locale/main", include: "**/*.xml").each() { File file ->
            def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))

            String parentName = file.getParentFile().getName()
            System.out.println("process:" + file + " from " + parentName)

            String localeSuffix = ""
            if(parentName.contains("-")) {
                localeSuffix = "_" + parentName.substring(parentName.indexOf("-")+1)
            }

            Properties props = new Properties()
            String baseName = file.getName().substring(0, file.getName().length() - 4)//chop off ".xml"
            baseName += localeSuffix

            System.out.println("Generating: " + baseName + ".properties")
            mainPropsMap.put(baseName, props)

            xmlDoc.string.each() { str ->
                String msgName = str.@name
                String msgValue = str.text()
                props.setProperty(msgName, msgValue)
            }

            File outFile = new File(mainPropsOutDir, baseName + ".properties")
            props.store(new FileWriter(outFile), "Generated: DO NOT MODIFY : see core/locale")
        }

        File localconfigOutDir = new File(outDir, "localconfig")
        if(!localconfigOutDir.exists()) {
            localconfigOutDir.mkdir()
        }

        File localconfigPropsOutDir = new File(localconfigOutDir, "props")
        if(!localconfigPropsOutDir.exists()) {
            localconfigPropsOutDir.mkdir()
        }

        rootProject.fileTree(dir : "core/locale/localconfig", include: "**/*.xml").each() { File file ->
            def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))

            String parentName = file.getParentFile().getName()
            System.out.println("process:" + file + " from " + parentName)

            String localeSuffix = ""
            if(parentName.contains("-")) {
                localeSuffix = "_" + parentName.substring(parentName.indexOf("-")+1)
            }

            String baseName = file.getName().substring(0, file.getName().length() - 4)//chop off ".xml"
            baseName += localeSuffix

            Properties props = new Properties()
            Properties mainprops = mainPropsMap.get(baseName)
            Enumeration<String> mainKeys = mainprops.keys()
            while(mainKeys.hasMoreElements()) {
                String propName = mainKeys.nextElement()
                String propValue = mainprops.get(propName)
                props.setProperty(propName, propValue)
            }

            xmlDoc.string.each() { str ->
                String msgName = str.@name
                String msgValue = str.text()
                props.setProperty(msgName, msgValue)
            }

            File outFile = new File(localconfigPropsOutDir, baseName + ".properties")
            props.store(new FileWriter(outFile), "Generated: DO NOT MODIFY : see core/locale")
        }




        Set<String> mainMessageIds = new HashSet<>()
        rootProject.fileTree(dir : "core/locale/main/values", include: "*.xml").each() { File file ->
            def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
            xmlDoc.string.each() { str ->
                String messageName = str.@name
                mainMessageIds.add(messageName)
            }
        }

        Set<String> localMessageIds = new HashSet<>()
        localMessageIds.addAll(mainMessageIds)
        rootProject.fileTree(dir : "core/locale/localconfig/values", include: "*.xml").each() { File file ->
            def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
            xmlDoc.string.each() { str ->
                String messageName = str.@name
                localMessageIds.add(messageName)
            }
        }



        //now generate the required Java sources for GWT
        File[] outDirs = new File[2]
        outDirs[0] = new File(mainOutDir, "java")
        outDirs[1] = new File(localconfigOutDir, "java")

        Set<String>[] messageIdSets = new Set<>[2]
        messageIdSets[0] = mainMessageIds
        messageIdSets[1] = localMessageIds

        for(int i = 0; i < outDirs.length; i++) {
            if(!outDirs[i].exists()) {
                outDirs[i].mkdirs()
            }

            StringBuilder msgInterface = new StringBuilder()
            msgInterface.append("package com.ustadmobile.core.generated.locale;\n")
            msgInterface.append("public interface UmMessages extends com.google.gwt.i18n.client.Messages{\n")


            StringBuilder msgHelper = new StringBuilder()
            msgHelper.append("package com.ustadmobile.core.generated.locale;\n")
                    .append("public class UmMessagesHelper {\n")
                    .append("\tpublic static String getMessage(int messageCode, UmMessages messages) {\n")
                    .append("\t\tswitch(messageCode){\n")

            Iterator<String> messageIdIterator = messageIdSets[i].iterator()
            while(messageIdIterator.hasNext()) {
                String messageId = messageIdIterator.next()

                msgInterface.append("\tString " + messageId +"();\n\n")

                msgHelper.append("\t\t\tcase MessageID." + messageId + ":\n")
                        .append("\t\t\t\treturn messages." + messageId +"();\n")
            }

            msgInterface.append("\n}\n")
            msgHelper.append("\t\t}\n\t}\n}")

            File pkgDir = new File(outDirs[i], "com/ustadmobile/core/generated/locale")
            if(!pkgDir.exists()) {
                pkgDir.mkdirs()
            }

            Path msgInterfacePath = new File(pkgDir, "UmMessages.java").toPath()
            Files.write(msgInterfacePath, msgInterface.toString().getBytes("UTF-8"))

            Path msgHelperPath = new File(pkgDir, "UmMessagesHelper.java").toPath()
            Files.write(msgHelperPath, msgHelper.toString().getBytes("UTF-8"))
        }

    }
}

/**
 * Convert app config properties to XML properties. By default this will convert
 *  src/main/assets/com/ustadmobile/core/appconfig.properties
 *  src/localconfig/assets/com/ustadmobile/core/appconfig.properties
 *
 *  and place XML properties files into build/generated/properties-appconfig .
 *
 *  This is used for appconfig on GWT as GWT does not support reading normal .properties files.
 */
task convertAppConfigToPropertiesXml {
    doLast{
        String appConfigPropertiesInStr
        String pathSep = String.valueOf(java.io.File.pathSeparator)
        if(project.hasProperty("appConfigPropertiesIn")){
            appConfigPropertiesInStr = appConfigPropertiesIn
        }else {
            appConfigPropertiesInStr = "${projectDir}/src/main/assets/com/ustadmobile/core/appconfig.properties" +
                 pathSep + "${projectDir}/src/localconfig/assets/com/ustadmobile/core/appconfig.properties"
        }

        String xmlConfigOutDir = null
        if(project.hasProperty("appConfigPropertiesXmlOutDir")){
            xmlConfigOutDir = appConfigPropertiesXmlOutDir
        }else {
            xmlConfigOutDir = "${projectDir}/build/generated/properties-appconfig/main/assets/com/ustadmobile/core/" +
                    pathSep + "${projectDir}/build/generated/properties-appconfig/localconfig/assets/com/ustadmobile/core/"
        }

        String[] appConfigPropertiesInArr = appConfigPropertiesInStr.split(pathSep)
        String[] appConfigPropertiesXmlOutDirArr = xmlConfigOutDir.split(pathSep)

        for(int i = 0; i < appConfigPropertiesInArr.length; i++) {
            Properties props = new Properties();
            File propertiesInFile = new File(appConfigPropertiesInArr[i])
            props.load(new FileInputStream(propertiesInFile))

            File outDir = new File(appConfigPropertiesXmlOutDirArr[i])
            if(!outDir.exists()) {
                outDir.mkdirs()
            }

            File outFile = new File(outDir, propertiesInFile.getName() + ".xml")
            FileOutputStream fout = new FileOutputStream(outFile)
            props.storeToXML(fout, "appconfig.properties", "UTF-8")
            fout.flush()
            fout.close()
            System.out.println("Wrote properties to : " + outFile.getAbsolutePath())
        }
    }
}


/*
 * Added to overcome limitation on Android studio as per:
 *  http://tools.android.com/knownissues#TOC-JUnit-tests-missing-resources-in-classpath-when-run-from-Studio
 */
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    from "${projectDir}/../core-tests/src/main/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources


publishing {
    publications {
        maven(MavenPublication) {
            groupId rootProject.group
            artifactId project.name
            version rootProject.version

            from components.java

            artifact sourceJar {
                classifier = 'sources'
            }
        }
    }

    repositories {
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}
