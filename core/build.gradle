import java.util.concurrent.atomic.AtomicInteger

/**
 * Core module build script : see buildconfig.core.default.gradle for configuration
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "gradle.plugin.de.fuerstenau:BuildConfigPlugin:$version_gradle_buildconfig_plugin"
    }
}

apply plugin: "java-library"
apply plugin: "jacoco"
apply plugin: "maven-publish"
apply plugin: "de.fuerstenau.buildconfig"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

jar {
    //Exclude factory classes that are intended to be replaced by platform specific implementations
    exclude("com/ustadmobile/core/impl/*Factory.class")
    exclude("com/ustadmobile/core/db/impl/*Factory.class")
    exclude("com/ustadmobile/core/db/entities/*.class")
    exclude("com/ustadmobile/core/db/*_Factory.class")
}

//Prepare all UmEditor resources on lib-content-editor module
compileJava.dependsOn(":lib-content-editor:copyResourcesToAndroidAssets")

task sourceJar(type: Jar) {
    from sourceSets.main.allJava

}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.json:json:$version_json"
    implementation "net.sf.kxml:kxml2:$version_kxml"

    implementation project(':lib-database')
    compileOnly project(':lib-database-entities')
    implementation project(':lib-database-runtime')
    implementation project(":lib-util")

    testImplementation project(":core-tests")
    testImplementation project(":sharedse")
    testImplementation project(":app-javase")
    testImplementation project(":lib-database-jdbc")
    testImplementation project(":lib-database-runtime-jdbc")
    testImplementation project(":lib-database-entities")
    testImplementation project(":app-rest-server")

    testImplementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
    testImplementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"
    testImplementation "junit:junit:$version_junit"
    testImplementation "org.mockito:mockito-core:$version_core_mockito"

    //Jersey dependencies
    testImplementation "org.glassfish.jersey.core:jersey-server:$version_jersey"
    testImplementation "org.glassfish.jersey.containers:jersey-container-servlet:$version_jersey"
    testImplementation "org.glassfish.jersey.core:jersey-client:$version_jersey"
    testImplementation "org.glassfish.jersey.inject:jersey-hk2:$version_jersey"
    testImplementation "org.glassfish.jersey.media:jersey-media-json-jackson:$version_jersey"
    testImplementation "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$version_jersey"
    testImplementation "org.glassfish.jersey.media:jersey-media-multipart:$version_jersey"

    //JNDI and SQLite dependencies for test database
    testImplementation "com.github.h-thurow:simple-jndi:$version_simple_jndi"
    testImplementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
    testImplementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
    testImplementation "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"
}


test {
    testLogging {
        exceptionFormat = 'full'
    }
}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.default.properties")))
if(rootProject.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.local.properties")))
}

buildConfig {
    appName = "core"

    sourceSets {
        test {
            packageName = "com.ustadmobile.core"
            clsName = "CoreTestConfig"
            buildConfigField 'String', 'TESTDB_JDBCURL_UMMAPPDATABASE', rootProject.ext.buildConfigProperties['test.db.UmAppDatabase.url']
            buildConfigField 'String', 'TESTDB_JDBCURL_DB1', rootProject.ext.buildConfigProperties['test.db.db1.url']
        }
    }
}
/*
 * Generate a class with constant integer flags for each string message ID. See localization docs
 * for further information.
 */
task prepareLocale (type: de.fuerstenau.gradle.buildconfig.GenerateBuildConfigTask) {
    inputs.files(fileTree(dir: rootProject.file("locale")).matching { include '*.xml' })
    outputDir = new File("${projectDir}/src/main/java")
    packageName = "com.ustadmobile.core.generated.locale"

    appName = project.ext.buildConfigProperties['appName']
    clsName = "MessageID"

    Map<String, Integer> messageIds = new HashMap<>();
    AtomicInteger messageIdGenerator = new AtomicInteger(2000)

    rootProject.fileTree(dir : "core/locale/main/values", include: "*.xml").each() { File file ->
        def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
        xmlDoc.string.each() { str ->
            String msgName = str.@name

            if(!messageIds.containsKey(msgName)) {
                Integer value;
                if(str.attributes().get("value") != null) {
                    value = new Integer(str.attributes().get("value"))
                }else {
                    value = new Integer(messageIdGenerator.getAndIncrement())
                }

                messageIds.put(msgName, value)
            }
        }
    }

    Iterator<String> nameIterator = messageIds.keySet().iterator();
    while(nameIterator.hasNext()) {
        String strName = nameIterator.next()
        Integer value =messageIds.get(strName)

        buildConfigField "int", strName, String.valueOf(value)
    }
}
compileJava.dependsOn(prepareLocale)


/*
 * Added to overcome limitation on Android studio as per:
 *  http://tools.android.com/knownissues#TOC-JUnit-tests-missing-resources-in-classpath-when-run-from-Studio
 */
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    from "${projectDir}/src/main/assets"
    from "${projectDir}/../core-tests/src/main/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources


publishing {
    publications {
        maven(MavenPublication) {
            groupId rootProject.group
            artifactId project.name
            version rootProject.version

            from components.java

            artifact sourceJar {
                classifier = 'sources'
            }
        }
    }

    repositories {
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}
