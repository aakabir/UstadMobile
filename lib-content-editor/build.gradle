import com.eriwen.gradle.css.tasks.MinifyCssTask
import com.eriwen.gradle.js.tasks.MinifyJsTask

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:2.14.1'
        classpath 'com.eriwen:gradle-css-plugin:1.11.1'
    }
}

apply plugin: "js"
apply plugin: 'css'

def rootPath = "${rootDir}/lib-content-editor/"
def rootTemplatePath = rootPath + "templates/"
def umEditorAssetsPath = "${rootDir}/app-android/src/main/assets/http/umEditor"

def umJsDynamicTasks = []
def umCssDynamicTasks = []
def umJsTaskIndex = 1
def umCssTaskIndex = 1
def testTimeout = 6000

/*Task which copies all umEditor resources from lib-content-editor directory to android assets*/
task copyResourcesToAndroidAssets << {
    def tinyMce = "lib/tinymce"
    def fonts = "lib/material-icon"
    def rangy =  "lib/rangy"
    def locale = "locale"
    def templates = "/templates"

    copy { from rootTemplatePath into umEditorAssetsPath + templates }
    copy { from rootPath + tinyMce into umEditorAssetsPath +"/"+ tinyMce }
    copy { from rootPath + rangy into umEditorAssetsPath +"/"+ rangy }
    copy { from rootPath + fonts into umEditorAssetsPath +"/"+fonts }
    copy { from rootPath + locale into umEditorAssetsPath +"/"+locale }

    delete rootPath + "dist"
    delete rootTemplatePath + "umEditorBlankDoc.zip"
    delete umEditorAssetsPath + templates + "/index.html"
    delete umEditorAssetsPath + templates + "/umEditorBlankDoc"

}


/* Task which creates blankDocument to be used as blank document template*/
task createUmEditorBlankDocumentArchive(type: Zip) {
    def blankDocPath = rootTemplatePath + "umEditorBlankDoc"

    from blankDocPath
    include '*'
    include '*/*'
    archiveName 'umEditorBlankDoc.zip'
    destinationDir(file(rootTemplatePath))

    doLast {
       delete blankDocPath
    }
}
copyResourcesToAndroidAssets.dependsOn(createUmEditorBlankDocumentArchive)


/*Task which creates all directories necessary for preparing a blank document template*/
task prepareUmEditorDirectories << {
    def blankDocPath = rootTemplatePath + "umEditorBlankDoc/"
    def blankDocCssPath = blankDocPath +"css/"
    def blankDocJsPath = blankDocPath +"js/"
    def blankDocMediaPath = blankDocPath +"media/"

    copy { from rootTemplatePath+"index.html" into blankDocPath }
    copy { from rootPath+"/lib/bootstrap/css/bootstrap.min.css", rootPath+"dist/css/UmEditorCore.min.css" into blankDocCssPath }
    copy { from rootPath+"/lib/bootstrap/js/bootstrap.min.js", rootPath+"/lib/jquery/jquery3.3.1.min.js",
            rootPath+"dist/js/UmContentEditorCore.min.js", rootPath+"dist/js/UmQuestionWidget.min.js" into blankDocJsPath }

    File mediaDir = new File(blankDocMediaPath)
    mediaDir.mkdir()
    new File(blankDocMediaPath+"/.media-hide.info").text = "media-dir"
}
createUmEditorBlankDocumentArchive.dependsOn(prepareUmEditorDirectories)


/* Task to minify UmEditor javascript file*/
new File(rootPath+"src/js").eachFile { def file ->
    def dynamicTaskName = "taskJsMinify${umJsTaskIndex}"

    task "${dynamicTaskName}"(type: MinifyJsTask) {
        source = file.absolutePath
        dest = rootPath + "dist/js/${file.name.replaceFirst(~/\.[^\.]+$/, '')}.min.js"
        closure {
            warningLevel = 'QUIET'
            compilerOptions.languageIn = 'ECMASCRIPT6'
            compilerOptions.languageOut = 'ECMASCRIPT5_STRICT'
        }
    }
    umJsDynamicTasks << dynamicTaskName
    umJsTaskIndex++
}
task minifyUmEditorJs(dependsOn: umJsDynamicTasks) << {}


/* Task to minify UmEditor css files*/
new File(rootPath +"src/css").eachFile { def file ->
    def dynamicTaskName = "taskCssMinify${umCssTaskIndex}"

    task "${dynamicTaskName}"(type: MinifyCssTask) {
        source = file.absolutePath
        dest = rootPath + "dist/css/${file.name.replaceFirst(~/\.[^\.]+$/, '')}.min.css"
    }
    umCssDynamicTasks << dynamicTaskName
    umCssTaskIndex++
}
task minifyUmEditorCss(dependsOn: umCssDynamicTasks) << {}
prepareUmEditorDirectories.dependsOn(minifyUmEditorCss,minifyUmEditorJs)


/* Execute content template tests */
task runContentTemplatesTest(type: Exec){
    def testFilePath = rootPath + "tests/content-template-tests.html"
    commandLine 'mocha-chrome', testFilePath, '--timeout ',testTimeout
}


/* Execute content formatting tests */
task runContentFomattingTests (type: Exec){
    def testFilePath = rootPath + "tests/content-formatting-tests.html"
    commandLine 'mocha-chrome', testFilePath, '--timeout ',testTimeout
}

/* Execute keyboard keydown logic tests */
task runKeyboardKeydownTests (type: Exec){
    def testFilePath = rootPath + "tests/content-protection.html"
    commandLine 'mocha-chrome', testFilePath, '--timeout ',testTimeout
}


/* Run all UmEditor Javascript tests */
task test(dependsOn: [runContentFomattingTests, runContentTemplatesTest, runKeyboardKeydownTests]) << {}
