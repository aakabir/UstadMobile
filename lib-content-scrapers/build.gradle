buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.7'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
    }
}

apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "jacoco"


test {
    ignoreFailures = true
}

task scrapeContent(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath

    systemProperties["java.naming.factory.initial"] = "org.osjava.sj.SimpleContextFactory"
    systemProperties["java.naming.factory.object"] = "org.apache.commons.dbcp2.BasicDataSourceFactory"
    systemProperties["org.osjava.sj.delimiter"] = "/"
    systemProperties["org.osjava.sj.space"] = "java:/comp/env"
    systemProperties["org.osjava.sj.root"] = "jndi-config/"
    systemProperties["org.osjava.sj.jndi.shared"] = "true"

    outputs.upToDateWhen { false }
}

task generateScraperBuildConfig(type: de.fuerstenau.gradle.buildconfig.GenerateBuildConfigTask) {
    doFirst {
        if (!rootProject.file(rootProject.ext.buildConfigProperties["shrinker.webp"]).exists()) {
            throw new GradleException("Shrinker Util requires webp to turn images to lossy format which needs to run on the command line" +
                    " You must define a path to the cwebp executable in buildconfig.local.properties.  " +
                    " On Ubuntu you can install this using apt-get install webp. " +
                    "Please open the README file in lib-content-scrapers for further instructions")
        }

        if (!rootProject.ext.localProperties.containsKey("scraper.chrome_driver_path")) {
            throw new GradleException("Content Scraping requires Selenium which needs a chrome driver to run." +
                    " You must define a path to the chrome driver in local.properties. " +
                    "Please open the README file in lib-content-scrapers for further instructions")
        }

        if (!rootProject.file(rootProject.ext.buildConfigProperties["ffmpeg.webm"]).exists()) {
            throw new GradleException("Shrinker Util requires ffmpeg to turn videos to webm format which needs to run on the command line" +
                    " You must define a path to the ffmpeg executable in buildconfig.local.properties.  " +
                    " On Ubuntu you can install this using apt-get install ffmpeg. " +
                    "Please open the README file in lib-content-scrapers for further instructions")
        }
    }


    inputs.files(rootProject.file("local.properties"))
    outputDir = new File("${projectDir}/src/main/java")
    packageName = "com.ustadmobile.lib.contentscrapers.buildconfig"
    appName = rootProject.ext.buildConfigProperties['appName']
    clsName = "ScraperBuildConfig"
    version = rootProject.version

    buildConfigField "String", "CHROME_DRIVER_PATH", rootProject.ext.localProperties["scraper.chrome_driver_path"]
    buildConfigField "String", "CWEBP_PATH", rootProject.ext.buildConfigProperties["shrinker.webp"]
    buildConfigField "String", "FFMPEG_PATH", rootProject.ext.buildConfigProperties["ffmpeg.webm"]
    buildConfigField "String", "CODEC2_PATH", rootProject.ext.buildConfigProperties["shrinker.codec2"]

}
compileJava.dependsOn(generateScraperBuildConfig)





dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":lib-database-runtime-jdbc")
    implementation project(":lib-database-jdbc")
    implementation "org.jsoup:jsoup:$version_jsoup"
    implementation "com.google.code.gson:gson:$version_gson"
    implementation project(":core")
    implementation project(":lib-database-entities")
    implementation project(":app-javase")
    implementation "commons-io:commons-io:$version_commons_io"
    implementation "org.apache.commons:commons-lang3:$version_apache_commons_lang"
    implementation "org.seleniumhq.selenium:selenium-java:$version_selenium"
    implementation "org.seleniumhq.selenium:selenium-chrome-driver:$version_selenium"
    implementation "io.github.bonigarcia:webdrivermanager:$version_web_driver"
    implementation "com.neovisionaries:nv-i18n:$version_nv_lang"
    implementation "org.postgresql:postgresql:$version_postgres_jdbc"
    implementation "org.apache.logging.log4j:log4j-core:$version_log4j"
    implementation "org.apache.logging.log4j:log4j-api:$version_log4j"

    testImplementation "junit:junit:$version_junit"
    testImplementation "com.squareup.okhttp3:mockwebserver:$version_mockwebserver"
    testImplementation "org.mockito:mockito-core:$version_android_mockito"
    implementation project(":lib-database")
    implementation project(":lib-database-entities")
    implementation project(":lib-database-runtime")
    implementation project(":sharedse")
    implementation "com.github.h-thurow:simple-jndi:$version_simple_jndi"
    implementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
    implementation "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"
    implementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/main/resources"
    into "${buildDir}/classes/test"
    exclude "**/jndi.properties"
}

processTestResources.dependsOn copyTestResources
compileTestJava.options.encoding = 'UTF-8'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
